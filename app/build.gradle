plugins {
    alias(libs.plugins.android.application)
    id 'android.aop'
}

String aveFlavorType = "type"
String appName = "导航"
String apkName = "NaviApp"

androidAopConfig {
    // enabled 为 false 切面不再起作用，默认不写为 true
    // 排除打包的实体名
    excludePackaging 'license/NOTICE', 'license/LICENSE.dom-software.txt', 'license/LICENSE'
    // verifyLeafExtends 是否开启验证叶子继承，默认打开，@AndroidAopMatchClassMethod 和 @AndroidAopCollectMethod 如果没有设置 LEAF_EXTENDS，可以关闭
    verifyLeafExtends false
    cutInfoJson false
}

def generateTime() {
    return new Date().format("yyyyMMdd_HHmmss")
}

android {
    namespace 'com.fy.navi.hmi'
    compileSdk Integer.parseInt(libs.versions.compileSdk.get())
    buildToolsVersion libs.versions.buildSdk.get()

    defaultConfig {
        applicationId "com.fy.navi.hmi"
        minSdk IS_PAD_RUN.toBoolean() ? Integer.parseInt(libs.versions.padminSdk.get()) : Integer.parseInt(libs.versions.minSdk.get())
        targetSdk Integer.parseInt(libs.versions.targetSdk.get())
        versionCode 1
        versionName generateTime() + ".1"
        buildConfigField("String", "MAP_SDK", "$MAP_SDK")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 添加 javaCompileOptions 和 annotationProcessorOptions
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildFeatures {
        buildConfig = true
        dataBinding = true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    getFlavorDimensionList().add(aveFlavorType)

    productFlavors {
        // 为方便区分，需要和mk文件的平台架构一一对应，但是资源可以共用
        defaule {
            dimension aveFlavorType
            isDefault = true
            manifestPlaceholders = [CAR_TYPE_VALUE: "Default",
                                    logo          : "@mipmap/ic_launcher",
                                    roundLogo     : "@mipmap/ic_launcher_round",
                                    appName       : appName]
            println("Pad渠道配置")
        }
        buick {
            // 车型平台GB 电子架构GB 屏幕30寸 硬件平台 8155
            dimension aveFlavorType
            manifestPlaceholders = [
                    CAR_TYPE_VALUE: "gbBuick",
                    logo          : "@mipmap/ic_launcher",
                    roundLogo     : "@mipmap/ic_launcher_round",
                    appName       : appName
            ]
            println("Buick车型渠道配置")
        }
        cadi {
            // 车型平台GB 电子架构GB 屏幕34寸 硬件平台8155/8195
            dimension aveFlavorType
            manifestPlaceholders = [
                    CAR_TYPE_VALUE: "gbCadi",
                    logo          : "@mipmap/ic_launcher",
                    roundLogo     : "@mipmap/ic_launcher_round",
                    appName       : appName
            ]
            println("Cadi车型渠道配置")
        }
        clea_8255 {
            // 车型平台557 电子架构local 屏幕16.3寸 硬件平台8255 目前8755尚未定义产品线
            dimension aveFlavorType
            manifestPlaceholders = [
                    CAR_TYPE_VALUE: "clea_8255",
                    logo          : "@mipmap/ic_launcher",
                    roundLogo     : "@mipmap/ic_launcher_round",
                    appName       : appName
            ]
            println("557-8255车型渠道配置")
        }
        clea_local_8155 {
            // 车型平台NDLB和NCXB 电子架构local 屏幕15.6寸 硬件平台8155
            dimension aveFlavorType
            manifestPlaceholders = [
                    CAR_TYPE_VALUE: "clea_local_8155",
                    logo          : "@mipmap/ic_launcher",
                    roundLogo     : "@mipmap/ic_launcher_round",
                    appName       : appName
            ]
            println("ndnc8155车型渠道配置")
        }
        clea_8775 {
            // 车型平台NDLB和NCXB 电子架构local 屏幕15.6寸 硬件平台8775
            dimension aveFlavorType
            manifestPlaceholders = [
                    CAR_TYPE_VALUE: "clea_8775",
                    logo          : "@mipmap/ic_launcher",
                    roundLogo     : "@mipmap/ic_launcher_round",
                    appName       : appName
            ]
            println("ndnc8775车型渠道配置")
        }
    }

    signingConfigs {
        debug {
            storeFile new File(rootDir, "/platform.keystore")
            storePassword 'android'
            keyAlias 'platformkey'
            keyPassword 'android'
        }
        release {
            storeFile new File(rootDir, "/platform.keystore")
            storePassword 'android'
            keyAlias 'platformkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        defaule {
            java.srcDirs = ['src_default/main/java']
            res.srcDirs = ['src_default/main/res']
            println("打包Default车型资源")
        }
        buick {
            java.srcDirs = ['src_buick/main/java']
            res.srcDirs = ['src_buick/main/res']
            println("打包别克车型资源")
        }
        cadi {
            java.srcDirs = ['src_cadillac/main/java']
            res.srcDirs = ['src_cadillac/main/res']
            println("打包凯迪车型资源")
        }
        clea_8255 {
            java.srcDirs = ['src_clea_8255/main/java']
            res.srcDirs = ['src_clea_8255/main/res']
            println("打包5578255车型资源")
        }
        clea_local_8155 {
            java.srcDirs = ['src_clea_8155/main/java']
            res.srcDirs = ['src_clea_8155/main/res']
            println("打包NDNC8155车型资源")
        }
        clea_8775 {
            java.srcDirs = ['src_clea_8775/main/java']
            res.srcDirs = ['src_clea_8775/main/res']
            println("打包NDNC8775车型资源")
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def flavors = getProductFlavorList(variant)
            def flavorName = flavors.join(', ')
            println "车型渠道列表: ${flavorName}"
            if (flavorName == "buick") {
                apkName = "SGMNavigation-buick"
            } else if (flavorName == "cadi") {
                apkName = "SGMNavigation-cadi"
            } else if (flavorName == "clea_8255") {
                apkName = "SGMNavigation-clea8255"
            } else if (flavorName == "clea_local_8155") {
                apkName = "SGMNavigation-ndnc8155"
            } else if (flavorName == "clea_8775") {
                apkName = "SGMNavigation-ndnc8775"
            } else {
                apkName = "SGMNavigation"
            }
            output.outputFileName = "${apkName}.apk"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    implementation libs.bundles.android.library
    implementation libs.car.ui.lib
    implementation files('src\\libs\\PatacLauncherManager.jar')
    testImplementation libs.bundles.test.junit
    androidTestImplementation libs.bundles.android.junit
    implementation libs.work.runtime
    implementation project(":ui")
    implementation project(":scene")
    implementation project(":service")
    implementation project(":utils")
    implementation project(":mapservice")
    implementation project(":fsa")
    implementation project(":engine:vtserver")
    implementation project(':vrbridge')
    implementation libs.guava
    implementation project(":burypoint")
    implementation libs.net.basic
    implementation libs.arouter.api
    annotationProcessor libs.arouter.compiler
}

static def getProductFlavorList(variant) {
    return variant.productFlavors.collect { it.name }
}

/*tasks.register('makeChannelList') {
    def outputFile = file('flavor_list.txt')
    def productFlavors = android.productFlavors.collect { it.name }
    doLast {
        outputFile.withWriter('utf-8') { writer ->
            productFlavors.each { flavor ->
                writer.println(flavor)
            }
        }
    }
    outputs.file outputFile
}*/

/*
tasks.configureEach { task ->
    if (task.name.startsWith("assemble")) {
        task.dependsOn makeChannelList
    }
}*/
